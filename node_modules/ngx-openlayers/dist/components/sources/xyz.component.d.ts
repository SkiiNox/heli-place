/// <reference types="openlayers" />
import { AfterContentInit, OnChanges, SimpleChanges } from '@angular/core';
import { source, Size, TileUrlFunctionType, TileLoadFunctionType, tilegrid } from 'openlayers';
import { LayerTileComponent } from '../layers';
import { SourceComponent } from './source.component';
import { TileGridComponent } from '../tilegrid.component';
import { SourceRasterComponent } from './raster.component';
import * as ɵngcc0 from '@angular/core';
export declare class SourceXYZComponent extends SourceComponent implements AfterContentInit, OnChanges {
    instance: source.XYZ;
    cacheSize: number;
    crossOrigin: string;
    opaque: boolean;
    projection: string;
    reprojectionErrorThreshold: number;
    minZoom: number;
    maxZoom: number;
    tileGrid: tilegrid.TileGrid;
    tileLoadFunction?: TileLoadFunctionType;
    tilePixelRatio: number;
    tileSize: number | Size;
    tileUrlFunction: TileUrlFunctionType;
    url: string;
    urls: string[];
    wrapX: boolean;
    tileGridXYZ: TileGridComponent;
    constructor(layer: LayerTileComponent, raster?: SourceRasterComponent);
    ngAfterContentInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<SourceXYZComponent, [{ optional: true; host: true; }, { optional: true; host: true; }]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<SourceXYZComponent, "aol-source-xyz", never, { "tileGrid": "tileGrid"; "cacheSize": "cacheSize"; "crossOrigin": "crossOrigin"; "opaque": "opaque"; "projection": "projection"; "reprojectionErrorThreshold": "reprojectionErrorThreshold"; "minZoom": "minZoom"; "maxZoom": "maxZoom"; "tileLoadFunction": "tileLoadFunction"; "tilePixelRatio": "tilePixelRatio"; "tileSize": "tileSize"; "tileUrlFunction": "tileUrlFunction"; "url": "url"; "urls": "urls"; "wrapX": "wrapX"; }, {}, ["tileGridXYZ"], ["*"]>;
}

//# sourceMappingURL=xyz.component.d.ts.map